#summary Exclusive Features (Intermediate).
#labels Featured,Phase-Implementation

= Who should read this =

  * To follow at this point, you need be familiar with the "add" methods of NResponder. You can find all information about this here AddMethods.

= Introduction =

Base on the following table, lets see 3 exclusive features of NResponder: *Number of replies*, *delay time* and *ordenate*.

|| *Used without instance* ||
|| *Used with instance* ||
|| *Specify number of dispatch arguments* ||
|| *Dynamic dispatch arguments* ||
|| *Change dispatch arguments in Run-Time* ||
|| *Remove all* ||
|| _*Set the number of replies*_ ||
|| _*Specify a delay time*_ ||
|| _*Ordenate*_ ||
|| *Can associate with a target* ||
|| *Can pause without remove* ||
|| *Can stop propagation* ||
|| *Change attributes in Run-Time* ||
|| *Garbage Collect* ||

----

= Number of replies =

This is one of the most useful features of NResponder. With number of replies you can specify how many times the NResponder will perform, after the last time, the NResponder will automatically remove itself and will clean all memories allocated to it.

For example, is a very common technique use a ADDED_TO_STAGE event in the constructor of the view classes (display objects) to prevent access to the stage property before the right time. But you need to remove that listener after the object is in the display list. 
With *number of replies* you can specify 1(one) in the `addNative()` method and don't worry more about anything.

Or, for example, in a game that user need to push a button 5 times, all that you need is specify the number of replies of the MOUSE_DOWN to 5 and NResponder will do everything else.

In all create methods ("add" methods and the constructor) the following parameter of "listener" is the "replies". You just need to inform a number (uint). Remember that 0 (zero) is the default and represent "infinity" replies.

To the example of ADDED_TO_STAGE, use something like this:
{{{
NResponder.addNative(this, Event.ADDED_TO_STAGE, init, 1);
}}}

To example of MOUSE_DOWN, use something like this:
{{{
NResponder.addNative(pushButton, MouseEvent.MOUSE_DOWN, clickHandler, 5);
}}}

Remember that like some other features, number of replies can be changed in the run-time. So if you need to change this number, use the instantiated mode:
{{{
var nrButton:NResponder = NResponder.addNative(pushButton, MouseEvent.MOUSE_DOWN, clickHandler, 5);

...

nrButton.replies = 10;
}}}

----

= Delay time =
