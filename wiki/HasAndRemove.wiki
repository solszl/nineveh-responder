#summary Has and Remove methods(Advanced).
#labels Featured,Phase-Implementation

= Who should read this =

  * To follow at this point, you need be familiar with the "add" methods of NResponder. You can find all information about this here AddMethods.
  * You need be familiar with the dispatch method too. You can find all information about this here DispatchBasic.

= Introduction =

Using the `has()` method you can check if a NResponder or a combination with some NResponders exist. The `remove()` can exclude a NResponder or a combination with some NResponders.
These methods are very similar with `hasEventListener()` and `removeEventListener()`, but with some big advantages.

----

= Has() =

This method expect 3 (three) parameter and by default all these three is null. Because you can make any combination to active a specific behavior. The parameters are:
  * Action - A string that represent the action you want to search.
  * Listener - The function itself that you want to search.
  * Target - The target itself that you want to search.

Let's start with a simple example and increase the complexity gradually:
{{{
NResponder.add('myAction', myListener, 1, 0, 0, myObject);
NResponder.add('anotherAction', anotherListener);

...

trace(NResponder.has('myAction'));                                 // true
trace(NResponder.has('anotherAction'));                            // true
trace(NResponder.has('myAction', myListener));                     // true
trace(NResponder.has(null, myListener));                           // true
trace(NResponder.has(null, anotherListener));                      // true
trace(NResponder.has(null, null, myObject));                       // true
trace(NResponder.has('myAction', anotherListener));                // false
trace(NResponder.has('anotherAction', myListener));                // false
trace(NResponder.has('anotherAction', anotherListener, myObject)); // false
trace(NResponder.has('myAction', null, myObject));                 // true
trace(NResponder.has('anotherAction', null, myObject));            // false
}}}

As you can see you can make any combination. You don't need every time have all parameters, you need at least one to check if has a NResponder with it. Analyzing the lines above, we can see:
  * NResponder.has('myAction') will check if exist at least one NResponder with the Action "myAction".
  * NResponder.has('myAction', myListener) will be more specific, and will check if has a NResponder with "myAction" as Action and "myListener" as Listener.
  * NResponder.has('anotherAction', anotherListener, myObject) will be a very specific and will search for a NResponder with exactly "myAction", "anotherListener" and "myObject", in this example, don't exist so return `false`.
  * NResponder.has(null, anotherListener) will ignore the Action and will search at least one NResponder with "anotherListener" as Listener.
  * NResponder.has(null, null, myObject) will ignore the Action and the Listener and will search at least one NResponder with "myObject" as Target.
  * NResponder.has('anotherAction', null, myObject) will search for a NResponder with "myObject" as Target with a specific Action, the "anotherAction" independent of the Listener that it has.

The most important here is remember that `null` parameter represent that you want to ignore that parameter and focus on others.

For security reasons, the `has()` with null in all three parameter will always return `false`, because you can't check or manipulate all the NResponder at same time.


----

= Remove() =

----

If you have some doubts about this content, leave you comment, check the full documentation here [http://db-in.com/frameworks/nineveh/doc/ ASDoc] or [mailto:diney@db-in.com email me].

Will be a pleasure to help.